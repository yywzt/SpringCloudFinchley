spring:
  profiles:
    active: peer2

---
server:
  port: 18760

eureka:
  instance:
    hostname: peer1
  client:
    # 表示是否将自己注册到Eureka Server，默认为true。由于当前这个应用就是Eureka Server，故而设为false
    register-with-eureka: false
    # 表示是否从Eureka Server获取注册信息，默认为true。因为这是一个单点的Eureka Server，不需要同步其他的Eureka Server节点的数据，故而设为false。
    fetch-registry: false
    service-url:
#      defaultZone: http://root:root@${eureka.instance.hostname:peer2}:${server.port:18761}/eureka/
#      defaultZone: http://peer2:18761/eureka/
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
  server:
     # 保护机制 默认开启
    enable-self-preservation: false
    # 清理间隔（单位毫秒，默认是60*1000）
#    eviction-interval-timer-in-ms: 5000

spring:
  application:
    name: eureka-server
#  security:
#    user:
#      name: root
#      password: root
  profiles: peer1

---
server:
  port: 18761

eureka:
  instance:
    hostname: peer2
  client:
    # 表示是否将自己注册到Eureka Server，默认为true。由于当前这个应用就是Eureka Server，故而设为false
#    register-with-eureka: false
    # 表示是否从Eureka Server获取注册信息，默认为true。因为这是一个单点的Eureka Server，不需要同步其他的Eureka Server节点的数据，故而设为false。
#    fetch-registry: false
    service-url:
#      defaultZone: http://root:root@${eureka.instance.hostname:peer1}:${server.port:18760}/eureka/
      defaultZone: http://peer1:18760/eureka/
  server:
    # 保护机制 默认开启
    enable-self-preservation: false
    # 清理间隔（单位毫秒，默认是60*1000）
#    eviction-interval-timer-in-ms: 5000

spring:
  application:
    name: eureka-server
#  security:
#    user:
#      name: root
#      password: root
  profiles: peer2